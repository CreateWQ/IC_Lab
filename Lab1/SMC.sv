// Generated by CIRCT firtool-1.62.0
module Sorting(
  input  [9:0] in_0,
               in_1,
               in_2,
               in_3,
               in_4,
               in_5,
  output [9:0] out_0,
               out_1,
               out_2,
               out_3,
               out_4,
               out_5
);

  wire       _GEN = in_0 > in_5;
  wire [9:0] s1_5 = _GEN ? in_5 : in_0;
  wire [9:0] s1_0 = _GEN ? in_0 : in_5;
  wire       _GEN_0 = in_1 > in_3;
  wire [9:0] s1_3 = _GEN_0 ? in_3 : in_1;
  wire [9:0] s1_1 = _GEN_0 ? in_1 : in_3;
  wire       _GEN_1 = in_2 > in_4;
  wire [9:0] s1_4 = _GEN_1 ? in_4 : in_2;
  wire [9:0] s1_2 = _GEN_1 ? in_2 : in_4;
  wire       _GEN_2 = s1_1 > s1_2;
  wire [9:0] s2_2 = _GEN_2 ? s1_2 : s1_1;
  wire [9:0] s2_1 = _GEN_2 ? s1_1 : s1_2;
  wire       _GEN_3 = s1_3 > s1_4;
  wire [9:0] s2_4 = _GEN_3 ? s1_4 : s1_3;
  wire [9:0] s2_3 = _GEN_3 ? s1_3 : s1_4;
  wire       _GEN_4 = s1_0 > s2_3;
  wire [9:0] s3_3 = _GEN_4 ? s2_3 : s1_0;
  wire [9:0] s3_0 = _GEN_4 ? s1_0 : s2_3;
  wire       _GEN_5 = s2_2 > s1_5;
  wire [9:0] s3_5 = _GEN_5 ? s1_5 : s2_2;
  wire [9:0] s3_2 = _GEN_5 ? s2_2 : s1_5;
  wire       _GEN_6 = s3_0 > s2_1;
  wire [9:0] s4_1 = _GEN_6 ? s2_1 : s3_0;
  wire       _GEN_7 = s3_2 > s3_3;
  wire [9:0] s4_3 = _GEN_7 ? s3_3 : s3_2;
  wire [9:0] s4_2 = _GEN_7 ? s3_2 : s3_3;
  wire       _GEN_8 = s2_4 > s3_5;
  wire [9:0] s4_4 = _GEN_8 ? s2_4 : s3_5;
  wire       _GEN_9 = s4_1 > s4_2;
  wire       _GEN_10 = s4_3 > s4_4;
  assign out_0 = _GEN_6 ? s3_0 : s2_1;
  assign out_1 = _GEN_9 ? s4_1 : s4_2;
  assign out_2 = _GEN_9 ? s4_2 : s4_1;
  assign out_3 = _GEN_10 ? s4_3 : s4_4;
  assign out_4 = _GEN_10 ? s4_4 : s4_3;
  assign out_5 = _GEN_8 ? s3_5 : s2_4;
endmodule

module SMC(
  input        clock,
               reset,
  input  [2:0] W_0,
               W_1,
               W_2,
               W_3,
               W_4,
               W_5,
               V_GS_0,
               V_GS_1,
               V_GS_2,
               V_GS_3,
               V_GS_4,
               V_GS_5,
               V_DS_0,
               V_DS_1,
               V_DS_2,
               V_DS_3,
               V_DS_4,
               V_DS_5,
  input  [1:0] mode,
  output [9:0] out_n
);

  wire [9:0] _sort_out_0;
  wire [9:0] _sort_out_1;
  wire [9:0] _sort_out_2;
  wire [9:0] _sort_out_3;
  wire [9:0] _sort_out_4;
  wire [9:0] _sort_out_5;
  wire [2:0] _gm_sat_C_0_T = V_GS_0 - 3'h1;
  wire       is_Tri_0 = _gm_sat_C_0_T > V_DS_0;
  wire [2:0] _gm_sat_C_1_T = V_GS_1 - 3'h1;
  wire       is_Tri_1 = _gm_sat_C_1_T > V_DS_1;
  wire [2:0] _gm_sat_C_2_T = V_GS_2 - 3'h1;
  wire       is_Tri_2 = _gm_sat_C_2_T > V_DS_2;
  wire [2:0] _gm_sat_C_3_T = V_GS_3 - 3'h1;
  wire       is_Tri_3 = _gm_sat_C_3_T > V_DS_3;
  wire [2:0] _gm_sat_C_4_T = V_GS_4 - 3'h1;
  wire       is_Tri_4 = _gm_sat_C_4_T > V_DS_4;
  wire [2:0] _gm_sat_C_5_T = V_GS_5 - 3'h1;
  wire       is_Tri_5 = _gm_sat_C_5_T > V_DS_5;
  wire [9:0] n1_0 = mode[1] ? _sort_out_0 : _sort_out_3;
  wire [9:0] n1_1 = mode[1] ? _sort_out_1 : _sort_out_4;
  wire [9:0] n1_2 = mode[1] ? _sort_out_2 : _sort_out_5;
  Sorting sort (
    .in_0
      ({4'h0,
        {3'h0, mode[0] ? (is_Tri_0 ? V_DS_0 : W_0) : 3'h2}
          * {3'h0, ~(mode[0]) | is_Tri_0 ? W_0 : _gm_sat_C_0_T}}
       * {6'h0,
          mode[0]
            ? (is_Tri_0 ? {V_GS_0, 1'h0} - {1'h0, V_DS_0} - 4'h2 : {1'h0, _gm_sat_C_0_T})
            : {1'h0, is_Tri_0 ? V_DS_0 : _gm_sat_C_0_T}} / 10'h3),
    .in_1
      ({4'h0,
        {3'h0, mode[0] ? (is_Tri_1 ? V_DS_1 : W_1) : 3'h2}
          * {3'h0, ~(mode[0]) | is_Tri_1 ? W_1 : _gm_sat_C_1_T}}
       * {6'h0,
          mode[0]
            ? (is_Tri_1 ? {V_GS_1, 1'h0} - {1'h0, V_DS_1} - 4'h2 : {1'h0, _gm_sat_C_1_T})
            : {1'h0, is_Tri_1 ? V_DS_1 : _gm_sat_C_1_T}} / 10'h3),
    .in_2
      ({4'h0,
        {3'h0, mode[0] ? (is_Tri_2 ? V_DS_2 : W_2) : 3'h2}
          * {3'h0, ~(mode[0]) | is_Tri_2 ? W_2 : _gm_sat_C_2_T}}
       * {6'h0,
          mode[0]
            ? (is_Tri_2 ? {V_GS_2, 1'h0} - {1'h0, V_DS_2} - 4'h2 : {1'h0, _gm_sat_C_2_T})
            : {1'h0, is_Tri_2 ? V_DS_2 : _gm_sat_C_2_T}} / 10'h3),
    .in_3
      ({4'h0,
        {3'h0, mode[0] ? (is_Tri_3 ? V_DS_3 : W_3) : 3'h2}
          * {3'h0, ~(mode[0]) | is_Tri_3 ? W_3 : _gm_sat_C_3_T}}
       * {6'h0,
          mode[0]
            ? (is_Tri_3 ? {V_GS_3, 1'h0} - {1'h0, V_DS_3} - 4'h2 : {1'h0, _gm_sat_C_3_T})
            : {1'h0, is_Tri_3 ? V_DS_3 : _gm_sat_C_3_T}} / 10'h3),
    .in_4
      ({4'h0,
        {3'h0, mode[0] ? (is_Tri_4 ? V_DS_4 : W_4) : 3'h2}
          * {3'h0, ~(mode[0]) | is_Tri_4 ? W_4 : _gm_sat_C_4_T}}
       * {6'h0,
          mode[0]
            ? (is_Tri_4 ? {V_GS_4, 1'h0} - {1'h0, V_DS_4} - 4'h2 : {1'h0, _gm_sat_C_4_T})
            : {1'h0, is_Tri_4 ? V_DS_4 : _gm_sat_C_4_T}} / 10'h3),
    .in_5
      ({4'h0,
        {3'h0, mode[0] ? (is_Tri_5 ? V_DS_5 : W_5) : 3'h2}
          * {3'h0, ~(mode[0]) | is_Tri_5 ? W_5 : _gm_sat_C_5_T}}
       * {6'h0,
          mode[0]
            ? (is_Tri_5 ? {V_GS_5, 1'h0} - {1'h0, V_DS_5} - 4'h2 : {1'h0, _gm_sat_C_5_T})
            : {1'h0, is_Tri_5 ? V_DS_5 : _gm_sat_C_5_T}} / 10'h3),
    .out_0 (_sort_out_0),
    .out_1 (_sort_out_1),
    .out_2 (_sort_out_2),
    .out_3 (_sort_out_3),
    .out_4 (_sort_out_4),
    .out_5 (_sort_out_5)
  );
  assign out_n =
    (mode[0] ? {n1_0[8:0], 1'h0} + n1_0 : n1_0) + (mode[0] ? {n1_1[7:0], 2'h0} : n1_1)
    + (mode[0] ? {n1_2[7:0], 2'h0} + n1_2 : n1_2);
endmodule

